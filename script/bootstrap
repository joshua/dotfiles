#!/bin/sh
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_file () {
  source=$1
  dest=$2

  if [ -f $dest ] || [ -d $dest ]
  then

    overwrite=false
    backup=false
    skip=false

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
      read -n 1 action

      case "$action" in
        o )
          overwrite=true;;
        O )
          overwrite_all=true;;
        b )
          backup=true;;
        B )
          backup_all=true;;
        s )
          skip=true;;
        S )
          skip_all=true;;
        * )
          ;;
      esac
    fi

    if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
    then
      rm -rf $dest
      success "removed $dest"
    fi

    if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
    then
      mv $dest $dest\.backup
      success "moved $dest to $dest.backup"
    fi

    if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
    then
      link_files $source $dest
    else
      success "skipped $source"
    fi

  else
    link_files $source $dest
  fi
}


setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

install_oh_my_zsh () {
  if [ -d "$HOME/.oh-my-zsh" ]
  then
    info "found ~/.oh-my-zsh"
  else
    user "Install oh-my-zsh? [y]es, [n]o. [q]uit?"
    read -e -n 1 action

    install=false

    case "$action" in
      y )
        install=true;;
      q )
        exit;;
      * )
        ;;
    esac

    if [ "$install" == "true" ]
    then
      info "Installing oh-my-zsh to ~/.oh-my-zsh \n"

      git clone https://github.com/robbyrussell/oh-my-zsh.git "$HOME/.oh-my-zsh"

      echo ''
      success "Installed oh-my-zsh to ~/.oh-my-zsh"
    else
      info "Skipping oh-my-zsh. You will need to modify ~/.zshrc"
    fi
  fi
}

install_dotfiles () {
  echo ''
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"
    install_file $source $dest
  done
}

install_osx_preferences () {
  echo ''
  info 'installing OS X Preferences'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT/osx/Preferences -name \*.plist`
  do
    dest="$HOME/Library/Preferences/`basename \"$source\"`"
    install_file $source $dest
  done
}

# Do stuff
setup_gitconfig
install_oh_my_zsh
install_dotfiles

# Mac only
if [ "$(uname -s)" == "Darwin" ]
then

  # Link Preference files
  install_osx_preferences

  # Set OS defaults, setup homebrew
  echo ''
  info "installing dependencies"
  if . $DOTFILES_ROOT/bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi

fi

echo ''
echo '  All installed!'
