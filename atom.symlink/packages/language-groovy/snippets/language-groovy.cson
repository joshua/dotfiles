'.source.groovy':
  '#!/usr/bin/env groovy -w':
    'prefix': '#!'
    'body': '#!/usr/bin/env groovy -w\n\n'
  'replace(dir: …, includes: …, token: …, value: …)':
    'prefix': 'replace'
    'body': 'replace(dir:"${1:dirName}", includes:"${2:*.*}", token:"${3:tokenName}", value:"\\${${4:value}}")$0'
  'Doc Block':
    'prefix': 'doc'
    'body': '/**\n * $0\n */'
  'constructor() { … }':
    'prefix': 'con'
    'body': '${1:private}${1/(.+)/(?1: )/}$1(${3:args}) {\n\t$0\n}'
  'key: "value" (Hash Pair)':
    'prefix': ':'
    'body': '${1:key}: ${2:"${3:value}"}'
  'Thread.start { … }':
    'prefix': 'thread'
    'body': 'Thread.start {\n\t$0\n}'
  'Thread.startDaemon { … }':
    'prefix': 'thread'
    'body': 'Thread.startDaemon {\n\t$0\n}'
  'all { … }':
    'prefix': 'all'
    'body': 'all {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'any { … }':
    'prefix': 'any'
    'body': 'any {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'as BigDecimal':
    'prefix': 'as'
    'body': 'as BigDecimal'
  'as BigInteger':
    'prefix': 'as'
    'body': 'as BigInteger'
  'as Double':
    'prefix': 'as'
    'body': 'as Double'
  'as Float':
    'prefix': 'as'
    'body': 'as Float'
  'asImmutable()':
    'prefix': '.as'
    'body': '.asImmutable()'
  'as Set':
    'prefix': 'as'
    'body': 'as Set'
  'as String':
    'prefix': 'as'
    'body': 'as String'
  'asSynchronized()':
    'prefix': '.as'
    'body': '.asSynchronized()'
  'as Writable':
    'prefix': 'as'
    'body': 'as Writable'
  'assertEquals':
    'prefix': 'ase'
    'body': 'assertEquals(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:expected}, ${3:actual})$0'
  'assertFalse':
    'prefix': 'asf'
    'body': 'assertFalse(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:test})$0'
  'assertNotEquals':
    'prefix': 'asne'
    'body': 'assertNotEquals(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:unexpected}, ${3:actual})$0'
  'assertNotNull':
    'prefix': 'asnn'
    'body': 'assertNotNull(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:instance})$0'
  'assertNull':
    'prefix': 'asn'
    'body': 'assertNull(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:instance})$0'
  'assertSame':
    'prefix': 'ass'
    'body': 'assertSame(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:expected}, ${3:actual})$0'
  'assertTrue':
    'prefix': 'ast'
    'body': 'assertTrue(${1/(.+)/(?1:")/}${1:message}${1/(.+)/(?1:", )/}${2:test})$0'
  'case … break':
    'prefix': 'case'
    'body': 'case ${1:CASE_NAME}:\n\t$2\nbreak$0'
  'instance … (Singleton)':
    'prefix': 'instance'
    'body': 'private static $1 instance\n\nstatic $1 getInstance(${2:args}) { \n\tif (!instance) instance = new $1(${2:args})\n\treturn instance\n}'
  'class … extends GroovyTestCase { … }':
    'prefix': 'tc'
    'body': 'class $1 extends GroovyTestCase {\n\n\t$0\n}'
  'collect { … }':
    'prefix': 'col'
    'body': 'collect {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'copy(file: …, tofile: …) ':
    'prefix': 'copy'
    'body': 'copy(file:"${1:sourceFile}", tofile:"${2:targetFile}")'
  'copy(todir: …) { fileset(dir: …) { include … exclude }':
    'prefix': 'copy'
    'body': 'copy(todir:"${1:targetDir}") {\n\tfileset(dir:"${2:sourceDir}") {\n\t\tinclude(name:"${3:includeName}")\n\t\texclude(name:"${4:excludeName}")\n\t}\n}'
  'copy(todir: …) { fileset:dir …) }':
    'prefix': 'copy'
    'body': 'copy(todir:"${1:targetDir}") {\n\tfileset(dir:"${2:sourceDir}")\n}'
  'closure = { … } ':
    'prefix': 'cv'
    'body': 'def ${1:closureName} = { ${2:args} ->\n\t$0\n}'
  'def':
    'prefix': 'd'
    'body': 'def '
  'downto() { … }':
    'prefix': 'dt'
    'body': 'downto(${1:0}) {${2/(.+)/(?1: )/}${2:i}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'each { … }':
    'prefix': 'ea'
    'body': 'each {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachByte { … }':
    'prefix': 'eab'
    'body': 'eachByte {${1/(.+)/(?1: )/}${1:byte}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachDir { … } ':
    'prefix': 'ead'
    'body': 'eachDir {${1/(.+)/(?1: )/}${1:dir}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachDirMatch { … }':
    'prefix': 'eadm'
    'body': 'eachDirMatch(${1:filter}) {${2/(.+)/(?1: )/}${2:dir}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachDirRecurse { … }':
    'prefix': 'eadr'
    'body': 'eachDirRecurse {${1/(.+)/(?1: )/}${1:dir}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachFile { … }':
    'prefix': 'eaf'
    'body': 'eachFile {${1/(.+)/(?1: )/}${1:file}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachFileMatch { … } ':
    'prefix': 'eafm'
    'body': 'eachFileMatch(${1:filter}) {${2/(.+)/(?1: )/}${2:file}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachFileRecurse { … }':
    'prefix': 'eafr'
    'body': 'eachFileRecurse {${1/(.+)/(?1: )/}${1:file}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachKey { … }':
    'prefix': 'eak'
    'body': 'eachKey {${1/(.+)/(?1: )/}${1:key}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachLine { … }':
    'prefix': 'eal'
    'body': 'eachLine {${1/(.+)/(?1: )/}${1:line}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachMatch(regex) { … } ':
    'prefix': 'eam'
    'body': 'eachMatch(/${1:regex}/) {${2/(.+)/(?1: )/}${2:match}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachObject { … }':
    'prefix': 'eao'
    'body': 'eachObject {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachValue { … }':
    'prefix': 'eav'
    'body': 'eachValue {${1/(.+)/(?1: )/}${1:value}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'eachWithIndex { … }':
    'prefix': 'eawi'
    'body': 'eachWithIndex { ${1:obj}, ${2:i} ->\n\t$0 \n}'
  'every { … }':
    'prefix': 'every'
    'body': 'every {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'find { … }':
    'prefix': 'find'
    'body': 'find {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'findAll { … }':
    'prefix': 'finda'
    'body': 'findAll {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'for(… in …) { … }':
    'prefix': 'forin'
    'body': 'for (${1:element} in ${2:collection}) {\n\t$0\n}'
  'grep(filter) { … }':
    'prefix': 'grep'
    'body': 'grep(${1:filter}) {${2/(.+)/(?1: )/}${2:obj}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'method':
    'prefix': 'm'
    'body': '${1:def}${1/.+/ /}${2:method}($3) {\n\t$0\n}\n'
  'mkdir(dir: …)':
    'prefix': 'mkdir'
    'body': 'mkdir(dir:"${1:dirName}")'
  'new File(…).eachLine { … }':
    'prefix': 'File'
    'body': 'new File(${1:"${2:path/to/file}"}).eachLine {${3/(.+)/(?1: )/}${3:line}${3/(.+)/(?1: ->)/}\n\t$0\n}'
  'print':
    'prefix': 'p'
    'body': 'print $0'
  'println ':
    'prefix': 'pl'
    'body': 'println $0'
  'replaceAll(regex) { … }':
    'prefix': 'replace'
    'body': 'replaceAll(/${1:regex}/) {${2/(.+)/(?1: )/}${2:match}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'reverseEach { … } ':
    'prefix': 'rea'
    'body': 'reverseEach {${1/(.+)/(?1: )/}${1:obj}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'runAfter() { … }':
    'prefix': 'runa'
    'body': 'runAfter(${1:delay}) {\n\t$0\n}'
  'setUp() { … }':
    'prefix': 'setup'
    'body': 'void setUp() {\n\t$0\n}'
  'shouldFail { … }':
    'prefix': 'sf'
    'body': 'shouldFail${1/(.+)/(?1:\\()/}${1:Exception}${1/(.+)/(?1:\\))/} {\n\t$0\n}'
  'sleep(secs) { … // on interrupt do }':
    'prefix': 'sleep'
    'body': 'sleep(${1:secs}) {\n\t${2:// on interrupt do}\n}'
  'sleep(secs)':
    'prefix': 'sleep'
    'body': 'sleep(${1:secs})'
  'sort { … }':
    'prefix': 'sort'
    'body': 'sort { \n\t$0\n}'
  'splitEachLine(separator) { … }':
    'prefix': 'sel'
    'body': 'splitEachLine(${1:separator}) {${2/(.+)/(?1: )/}${2:obj}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'static main() { … }':
    'prefix': 'main'
    'body': 'static main(args) {\n\t$0\n}'
  'step(to,amount) { … }':
    'prefix': 'step'
    'body': 'step(${1:to}, ${2:amount}) {${3/(.+)/(?1: )/}${3:i}${3/(.+)/(?1: ->)/}\n\t$0\n}'
  'switch … case':
    'prefix': 'switch'
    'body': 'switch(${1:value}) {\n\tcase ${2:CASE}:\n\t\t$3\n\tbreak$0\n}'
  'switch … case … default':
    'prefix': 'switch'
    'body': 'switch(${1:value}) {\n\tcase ${3:CASE}:\n\t\t$4\n\tbreak$0\n\tdefault:\n\t\t$2\n\tbreak\n}'
  'tearDown() { … }':
    'prefix': 'tear'
    'body': 'void tearDown() {\n\t$0\n}'
  'test()':
    'prefix': 't'
    'body': 'void test$1() {\n\t$0\n}'
  'to Array':
    'prefix': 'to'
    'body': 'toArray()'
  'to BigDecimal':
    'prefix': 'to'
    'body': 'toBigDecimal()'
  'to BigInteger':
    'prefix': 'to'
    'body': 'toBigInteger()'
  'to Boolean':
    'prefix': 'to'
    'body': 'toBoolean()'
  'to Character':
    'prefix': 'to'
    'body': 'toCharacter()'
  'to Double':
    'prefix': 'to'
    'body': 'toDouble()'
  'to Float':
    'prefix': 'to'
    'body': 'toFloat()'
  'to Integer':
    'prefix': 'to'
    'body': 'toInteger()'
  'to List':
    'prefix': 'to'
    'body': 'toList()'
  'to String':
    'prefix': 'to'
    'body': 'toString()'
  'to URI':
    'prefix': 'to'
    'body': 'toURI()'
  'to URL':
    'prefix': 'to'
    'body': 'toURL()'
  'upto() { … }':
    'prefix': 'ut'
    'body': 'upto(${1:0}) {${2/(.+)/(?1: )/}${2:i}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'var':
    'prefix': 'v'
    'body': '${1:def} ${2:var}${3: = ${0:null}}'
  'withInputStream { … }':
    'prefix': 'with'
    'body': 'withInputStream {${1/(.+)/(?1: )/}${1:in}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withOutputStream { … }':
    'prefix': 'with'
    'body': 'withOutputStream {${1/(.+)/(?1: )/}${1:out}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withPrintWriter { … }':
    'prefix': 'with'
    'body': 'withPrintWriter {${1/(.+)/(?1: )/}${1:writer}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withReader { … }':
    'prefix': 'with'
    'body': 'withReader {${1/(.+)/(?1: )/}${1:reader}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withStream { … }':
    'prefix': 'with'
    'body': 'withStream {${1/(.+)/(?1: )/}${1:stream}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withStreams { … }':
    'prefix': 'with'
    'body': 'withStreams {${1/(.+)/(?1: )/}${1:socket}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withWriter { … }':
    'prefix': 'with'
    'body': 'withWriter {${1/(.+)/(?1: )/}${1:writer}${1/(.+)/(?1: ->)/}\n\t$0\n}'
  'withWriter(charset) { … }':
    'prefix': 'with'
    'body': 'withWriter(${1:charset}) {${2/(.+)/(?1: )/}${2:writer}${2/(.+)/(?1: ->)/}\n\t$0\n}'
  'withWriterAppend(charset) { … }':
    'prefix': 'with'
    'body': 'withWriterAppend(${1:charset}) {${2/(.+)/(?1: )/}${2:writer}${2/(.+)/(?1: ->)/}\n\t$0\n}'
